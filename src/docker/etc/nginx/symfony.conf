server {
    server_name symfony.dev;
    root /var/www/symfony/web;

    location / {
        try_files $uri @rewriteapp;
    }

    location @rewriteapp {
        rewrite ^(.*)$ /app.php/$1 last;
    }

    location ~ ^/(app|app_dev|config)\.php(/|$) {
        fastcgi_pass php-upstream;
        fastcgi_split_path_info ^(.+\.php)(/.*)$;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param HTTPS off;
    }

    # https://github.com/h5bp/html5-boilerplate/blob/5370479476dceae7cc3ea105946536d6bc0ee468/.htaccess#L403
    # This will route all requests for /css/style.20120716.css to /css/style.css
    # Read also this: github.com/h5bp/html5-boilerplate/wiki/cachebusting
    # This is not included by default, because it'd be better if you use the build
    # script to manage the file names.
    location ~* (.+)\.(?:\d+)\.(js|css|png|jpg|jpeg|gif)$ {
      try_files $uri $1.$2;
    }

    # No default expire rule. This config mirrors that of apache as outlined in the
    # html5-boilerplate .htaccess file. However, nginx applies rules by location,
    # the apache rules are defined by type. A consequence of this difference is that
    # if you use no file extension in the url and serve html, with apache you get an
    # expire time of 0s, with nginx you'd get an expire header of one month in the
    # future (if the default expire rule is 1 month). Therefore, do not use a
    # default expire rule with nginx unless your site is completely static

    # cache.appcache, your document html and data
    location ~* \.(?:manifest|appcache|html?|xml|json)$ {
      expires -1;
    }

    # feed
    location ~* \.(?:rss|atom)$ {
      expires 1h;
    }

    # images, icons, video, audio
    location ~* \.(?:jpg|jpeg|gif|png|ico|cur|gz|svg|svgz|mp4|ogg|ogv|webm|htc)$ {
      expires 1M;
      access_log off;
      add_header Cache-Control "public";
    }

    # css, javascript
    location ~* \.(?:css|js)$ {
      #expires 1y;
      expires -1;
      access_log off;
    }

    # This tells Nginx to cache open file handles, "not found" errors, metadata about files and their permissions, etc.
    #
    # The upside of this is that Nginx can immediately begin sending data when a popular file is requested,
    # and will also know to immediately send a 404 if a file is missing on disk, and so on.
    #
    # However, it also means that the server won't react immediately to changes on disk, which may be undesirable.
    #
    # In the below configuration, inactive files are released from the cache after 20 seconds, whereas
    # active (recently requested) files are re-validated every 30 seconds.
    #
    # Descriptors will not be cached unless they are used at least 2 times within 20 seconds (the inactive time).
    #
    # A maximum of the 1000 most recently used file descriptors can be cached at any time.
    #
    # Production servers with stable file collections will definitely want to enable the cache.
    # open_file_cache          max=1000 inactive=20s;
    # open_file_cache_valid    30s;
    # open_file_cache_min_uses 2;
    # open_file_cache_errors   on;

    # The X-Frame-Options header indicates whether a browser should be allowed
    # to render a page within a frame or iframe.
    add_header X-Frame-Options SAMEORIGIN;

    # MIME type sniffing security protection
    #	There are very few edge cases where you wouldn't want this enabled.
    add_header X-Content-Type-Options nosniff;

    # The X-XSS-Protection header is used by Internet Explorer version 8+
    # The header instructs IE to enable its inbuilt anti-cross-site scripting filter.
    add_header X-XSS-Protection "1; mode=block";

    # with Content Security Policy (CSP) enabled (and a browser that supports it (http://caniuse.com/#feat=contentsecuritypolicy),
    # you can tell the browser that it can only download content from the domains you explicitly allow
    # CSP can be quite difficult to configure, and cause real issues if you get it wrong
    # There is website that helps you generate a policy here http://cspisawesome.com/
    # add_header Content-Security-Policy "default-src 'self'; style-src 'self' 'unsafe-inline'; script-src 'self' https://www.google-analytics.com;";

    # Prevent clients from accessing hidden files (starting with a dot)
    # This is particularly important if you store .htpasswd files in the site hierarchy
    # Access to `/.well-known/` is allowed.
    # https://www.mnot.net/blog/2010/04/07/well-known
    # https://tools.ietf.org/html/rfc5785
    location ~* /\.(?!well-known\/) {
      deny all;
    }

    # Prevent clients from accessing to backup/config/source files
    location ~* (?:\.(?:bak|conf|dist|fla|in[ci]|log|psd|sh|sql|sw[op])|~)$ {
      deny all;
    }

    # Prevent mobile network providers from modifying your site
    #
    # (!) If you are using `ngx_pagespeed`, please note that setting
    # the `Cache-Control: no-transform` response header will prevent
    # `PageSpeed` from rewriting `HTML` files, and, if
    # `pagespeed DisableRewriteOnNoTransform off` is not used, also
    # from rewriting other resources.
    #
    # https://developers.google.com/speed/pagespeed/module/configuration#notransform

    #add_header "Cache-Control" "no-transform";

    # Force the latest IE version
    add_header "X-UA-Compatible" "IE=Edge";

    # Log access to this file
    # This is only used when you don't override it on a server{} level
    error_log /var/log/nginx/error.log;
    access_log /var/log/nginx/access.log;
}
